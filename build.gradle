/*
 * Copyright (c) 2017, Michael Sonst, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
/*
 * Requires ossrhUsername and ossrhPassword to be set either in 
 * ~/.gradle/gradle.properties or to be passed via commandline 
 * gradlew publish -PossrhUsername=<SonartypeUsername> -PossrhPassword=<SonartypePassword>
 */
 
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'de.sonsts'
version = '1.000.00-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
	
	maven {
    // Download snapshot, release and staged artifacts from staging group
    url "https://oss.sonatype.org/content/groups/staging"
  }
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
			srcDir 'src/generated/java'
			srcDir 'src/test/java'
		}
		resources {
			srcDir 'src/main/resources'
			srcDir 'src/test/resources'
		}
	}
}

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
  }
}
    
configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
    
dependencies {
	compile "log4j:log4j:1.2.17"
    
  compile 'net.java.dev.jna:jna:4.2.0'
  compile 'net.java.dev.jna:jna-platform:4.2.0'
  compile 'net.java.dev.jna:platform:3.5.2'
    
  compile 'de.sonsts:common:1.000.00-SNAPSHOT'
    
  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-core:1.9.5'
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom, rootProject)
            from components.java

            artifact sourcesJar
            artifact javadocJar

            // sign the pom
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
                pomFile.delete()
            }

            // sign the artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            
               if(project.version.endsWith('-SNAPSHOT')) {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

def customizePom(pom, gradleProject) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description gradleProject.description
            name 'Session tracker code'
            url 'https://github.com/msonst/session-tracker'

            issueManagement {
                system 'GitHub'
                url 'https://github.com/msonst/session-tracker/issues'
            }
            
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/msonst/session-tracker/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/msonst/session-tracker'
                connection 'scm:git:git@github.com:msonst/session-tracker.git'
                developerConnection 'scm:git:ssh://git@github.com:msonst/session-tracker.git'
            }
            developers {
                developer {
                    id 'msonst'
                    name 'Michael Sonst'
                    email 'codedorado@gmail.com'
                }
            }
        }
    }
}
